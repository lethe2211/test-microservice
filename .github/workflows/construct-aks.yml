name: "Construct an AKS cluster"

on:
  workflow_dispatch: {}

jobs:
  terraform:
    name: 'Construct a AKS cluster with Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure/aks

    env:
      ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}
      TF_VAR_subscription_id: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
      TF_VAR_client_id: ${{secrets.TF_ARM_CLIENT_ID}}
      TF_VAR_client_secret: ${{secrets.TF_ARM_CLIENT_SECRET}}
      TF_VAR_tenant_id: ${{secrets.TF_ARM_TENANT_ID}}
      TF_VAR_resource_group_name: "aks-test"
      TF_VAR_location: "East US"
      TF_VAR_cluster_name: "test-aks-cluster"
      TF_VAR_dns_prefix: "kubecluster"
      TF_VAR_default_node_pool_name: "default"
      TF_VAR_enable_auto_scaling: false
      TF_VAR_vm_size: "Standard_D2_v2"
      TF_VAR_node_count: "1"
      BC_resource_group_name: "k8s-test"
      BC_storage_account_name: "lethe2211k8s"
      BC_container_name: "aks-state"
      BC_key: "prod.terraform.tfstate"

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Display environmental variables for debugging
    - name: Display env vars
      run: env

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init --backend-config resource_group_name=${BC_resource_group_name} --backend-config storage_account_name=${BC_storage_account_name} --backend-config container_name=${BC_container_name} --backend-config key=${BC_key}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

    # Build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply -auto-approve